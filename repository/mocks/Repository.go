// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "Golang-API-Assessment/types"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCommonStudents provides a mock function with given fields: teacherEmail
func (_m *Repository) GetCommonStudents(teacherEmail string) ([]string, error) {
	ret := _m.Called(teacherEmail)

	if len(ret) == 0 {
		panic("no return value specified for GetCommonStudents")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(teacherEmail)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(teacherEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(teacherEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields:
func (_m *Repository) GetNotification() (*types.Notification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotification")
	}

	var r0 *types.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.Notification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registration provides a mock function with given fields: request
func (_m *Repository) Registration(request *types.RegisterRequest) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Registration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.RegisterRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Suspension provides a mock function with given fields: request
func (_m *Repository) Suspension(request *types.SuspendRequest) error {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Suspension")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.SuspendRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
